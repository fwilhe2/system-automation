# SPDX-FileCopyrightText: Florian Wilhelm
# SPDX-License-Identifier: MIT

name: CI

on:
  push:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0"

jobs:
  deb:
    runs-on: ubuntu-24.04${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        runner: ["", "-arm"] #amd64 and arm
        version: [
            "ubuntu:latest",
            "ubuntu:rolling",
            "ubuntu:devel",
            # deb822_repository is new in ansible-core 2.15
            # which is not (yet?) available for bookworm
            # "debian:stable",
            "debian:testing",
            "debian:unstable",
          ]
    steps:
      - uses: actions/checkout@v4
      - run: dpkg --print-architecture
      - name: Build Test Container deb ${{ matrix.version }}
        run: docker build --build-arg=VERSION=${{ matrix.version }} -t system-automation-test-deb-${{ matrix.version }} --file test/container/Containerfile.dpkg .
      - name: Run Test deb ${{ matrix.version }}
        run: docker run --user user --tty --volume $PWD:/mnt system-automation-test-deb-${{ matrix.version }}

  yum:
    runs-on: ubuntu-24.04${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        runner: ["", "-arm"] #amd64 and arm
        version: [latest, rawhide]
    steps:
      - uses: actions/checkout@v4
      - name: Build Test Container Fedora ${{ matrix.version }}
        run: docker build --build-arg=VERSION=${{ matrix.version }} -t system-automation-test-fedora-${{ matrix.version }} --file test/container/Containerfile.fedora .
      - name: Run Test Fedora ${{ matrix.version }}
        run: docker run --user user --tty --volume $PWD:/mnt system-automation-test-fedora-${{ matrix.version }}

  el:
    runs-on: ubuntu-24.04${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        runner: ["", "-arm"] #amd64 and arm
        version: ["almalinux:10"]
    steps:
      - uses: actions/checkout@v4
      - name: Build Test Container EL ${{ matrix.version }}
        run: docker build --build-arg=VERSION=${{ matrix.version }} -t system-automation-test-el-${{ matrix.version }} --file test/container/Containerfile.el .
      - name: Run Test EL ${{ matrix.version }}
        run: docker run --user user --tty --volume $PWD:/mnt system-automation-test-el-${{ matrix.version }}

  zypper:
    runs-on: ubuntu-24.04${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        runner: ["", "-arm"] #amd64 and arm
    steps:
      - uses: actions/checkout@v4
      - name: Build Test Container opensuse
        run: docker build -t system-automation-test-opensuse --file test/container/Containerfile.opensuse .
      - name: Run Test opensuse
        run: docker run --user user --tty --volume $PWD:/mnt system-automation-test-opensuse

  pacman:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Build Test Container archlinux
        run: docker build -t system-automation-test-archlinux --file test/container/Containerfile.archlinux .
      - name: Run Test archlinux
        run: docker run --user user --tty --volume $PWD:/mnt system-automation-test-archlinux

  syntax-check:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - run: pip3 install ansible
      - run: ansible-playbook -vvvv --inventory inventory --syntax-check desktop.yml
      - run: ansible-playbook -vvvv --inventory inventory --syntax-check desktop.yml

  formatting:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - run: pip install yapf
      - run: ./format-files.sh
      - run: git diff --name-only --exit-code
